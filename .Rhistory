find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
instakk.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth")
cameras <- read.csv("c://temp//Baltimore_Fixed_Speed_Cameras.csv")
names(cameras)
Sys.timezone
Sys.timezone()
data <- read.csv("c:\\temp\\getdata-data-ss06hid.csv")
names(data)
?strsplit
strsplit("wgtp74")
strsplit("wgtp74", "")
strsplit("wgtp74", "wgtp")
strsplit(names(data), "wgtp")
strsplit(names(data), "wgtp")[123]
data <- read.csv("c:\\temp\\getdata-data-GDP.csv", skip=4)
head(data)
tail(data)
data <- read.csv("c:\\temp\\getdata-data-GDP.csv", skip=4, nrows=190)
tail(data)
data$X.4
?subst
?subs
?sub
gsub(",", "", data$X.4)
mean(gsub(",", "", data$X.4))
?trim
?trm
mean(gsub(" ", "", gsub(",", "", data$X.4)))
gsub(" ", "", gsub(",", "", data$X.4))
as.numeric(gsub(" ", "", gsub(",", "", data$X.4)))
mean(as.numeric(gsub(" ", "", gsub(",", "", data$X.4))))
head(data)
grep("^United",countryNames)
grep("^United", data$X.3)
gdp <- read.csv("c:\\temp\\getdata-data-GDP.csv", skip=4, nrows=190)
edu <- read.csv("c:\\temp\\getdata-data-EDSTATS_Country.csv")
?merge
head(gdp)
head(edu)
merge(gdp, edu, by.x=X, by.y=CountryCode)
merge(gdp, edu, by.x=gdp.X, by.y=CountryCode)
names(gdp)
merge(gdp, edu, by.x=gdp.X, by.y=edu.CountryCode)
gdp.X
gdp.$X
gdp
gdp$X
merge(gdp, edu, by.x=gdp$X, by.y=edu$CountryCode)
names(edu)
edu$CountryCode
merge(gdp, edu, by.x=gdp$X, by.y=CountryCode)
merge(gdp, edu, by.x=X, by.y=CountryCode)
merge(gdp, edu, by.x=gdp$X, by.y=CountryCode)
merge(gdp, edu, by.x=gdp$X, by.y=edu.CountryCode)
merge(gdp, edu, by.x="gdp$X", by.y="edu.CountryCode")
merge(gdp, edu, by.x="X", by.y="edu.CountryCode")
merge(gdp, edu, by.x="X", by.y="CountryCode")
merged <- merge(gdp, edu, by.x="X", by.y="CountryCode")
names(edu)
merged[,13]
merged[13]
head(merged)
head(merged$SpecialNotes)
head(merged$Special.Notes)
head(merged$Special.Notes, 20)
?grep
grep("^Fiscal year end:", merged$Special.Notes)
grep("^Fiscal year end: (.*?);", merged$Special.Notes)
grep("^Fiscal year end: (.*?);", merged$Special.Notes, value=T)
grep("^Fiscal year end: June", merged$Special.Notes, value=T)
grep("^Fiscal year end: June", merged$Special.Notes)
length(grep("^Fiscal year end: June", merged$Special.Notes))
install.packages('quantmod')
library(quantmod)
install.packagesxts()
install.packages("xts")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sampleTimes[1]
sampleTimes[[1]]
class(sampleTimes[[1]])
class(sampleTimes[1])
sampleTimes[1] >= "2012-01-01"
sampleTimes >= "2012-01-01"
sampleTimes >= "2012-01-01" & sampleTime <= "2012-12-31"
sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"
sampleTimes[,sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"]
sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31",]
sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"]
length(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"])
length(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"] & weekdays(sampleTimes) == "Monday")
length(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31" & weekdays(sampleTimes) == "Monday"])
weekdays(sampleTimes)
length(sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31" & weekdays(sampleTimes) == "maandag"])
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=F)
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, correct_size = size + 100)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
select(pack_sum, coung > 679)
select(pack_sum, count > 679)
top_counts <- select(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
?spread
submit()
submit()
submit()
info()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?select
?separate
submit()
? group_by
submit()
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
info()
q()
ls
ls()
rm(list=ls())
q()
q()
getwd()
setwe("c:/dev/RepData_PeerAssessment1")
setwd("c:/dev/RepData_PeerAssessment1")
activity <- read.csv(unz("activity.zip", "activity.csv"), colClasses=c(NA, "Date", NA))
stepsPerInterval <- aggregate(steps ~ interval, activity, mean)
missingValues <- merge(missingValues, stepsPerInterval, by="interval")
missingValues <- activity[is.na(activity$steps), ]
missingValues <- merge(missingValues, stepsPerInterval, by="interval")
missingValues[order(date, interval), ]
head(missingValues)
missingValues[order(missingValues$date, missingValues$interval), ]
head(missingValues[order(missingValues$date, missingValues$interval), ])
activity[is.na(activity$steps), "steps"] <- missingValues[, "steps.y"]
head(activity)
activity <- read.csv(unz("activity.zip", "activity.csv"), colClasses=c(NA, "Date", NA))
head(missingValues)
missingValues <- missingValues[order(missingValues$date, missingValues$interval), ]
head(activity[is.na(activity$steps), "steps"] <- missingValues[, "steps.y"])
head(activity)
head(missingValues)
tail(activity)
tail(missingValues)
nrow(activity[is.na(activity$steps), ])
weekday(activity$date)
weekdays(activity$date)
as.numeric(weekdays(activity$date))
if weekdays(activity$date) == "Sunday" then "Yes" else "No"
if(weekdays(activity$date) == "Sunday") then "Yes" else "No"
if(weekdays(activity$date) == "Sunday") "Yes" else "No"
ifelse(weekdays(activity$date) == "Sunday", "Yes", "No")
ifelse(weekdays(activity$date) in c("Saturday", "Sunday"), "Yes", "No")
ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "Yes", "No")
ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "Yes", "No")
head(activity)
activity$day.type = ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
summary(activity)
str(activity)
activity$day.type = ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), Weekend, Weekday)
as.factor(ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
activity$day.type <- as.factor(ifelse(weekdays(activity$date) %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
str(activity)
head(activity)
par(mfrow=c(2, 1))
stepsPerInterval <- aggregate(steps ~ interval, activity[day.type="weekend"], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[day.type="weekend", ], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[day.type=weekend, ], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[activity$day.type=weekend, ], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[activity$day.type == weekend, ], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[activity$day.type == "weekend", ], mean)
stepsPerInterval <- aggregate(steps ~ interval, activity[activity$day.type == "Weekend", ], mean)
library(lattice)
stepsPerInterval <- aggregate(steps ~ interval, activity, mean)
head(stepsPerInterval)
